{"version":3,"sources":["NoteManager.js","ChordViewer.js","GuitarChordViewer.js","MidiManager.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["NoteManager","callback","onChordChangeCallbacks","push","event","eventType","noteIndex","enableNote","disableNote","activeNotes","add","clearTimeout","this","currentNoteEnabledTimeout","setTimeout","calculateChord","chordLocked","noteEnabledBufferChordLocked","noteEnabledBufferNoChordLocked","delete","currentNoteDisabledTimeout","chordOrigins","has","size","Set","console","log","noteDisabledBuffer","NOTE_NAMES","noteName","findIndex","Math","floor","Array","from","values","map","getNoteName","currentChord","sortedNotes","sort","newChord","detect","lastChord","forEach","ChordViewer","state","currentChordInfo","listenForChordChange","setState","Chord","get","tonic","hue","indexOf","chordColors","getCurrentChordColors","symbol","type","style","height","width","display","justifyContent","alignItems","backgroundColor","borderRadius","flexGrow","flexDirection","margin","color","fontSize","React","Component","GuitarChordViewer","setUpChordBox","renderChord","chordbox","ChordBox","circleRadius","numStrings","numFrets","showTuning","defaultColor","bgColor","strokeColor","textColor","stringColor","fretColor","labelColor","fretWidth","stringWidth","renderBlankChord","draw","chord","tuning","fingers","frets","barres","consideredFingers","i","finger","fromString","toString","j","fret","parseInt","chord_","document","querySelector","innerHTML","chordInfo","fingeringInfo","chordData","lowestFret","fretNum","positionOffset","calculateBarres","position","id","MidiManager","navigator","requestMIDIAccess","then","onMidiSucess","onMidiFail","listenForMidiEvents","onMidiEvent","midiAcess","inputs","onmidimessage","midiEventOccurred","listeners","data","WHITE_KEY_PATTERN","KEY_SATURATION_RANGE","KEY_LIGHTNESS_RANGE","KeyboardKey","props","keyActive","velocity","keyColor","getKeyColor","index","velocityMultiplier","lightness","saturation","outline","numKeysOffset","left","BLACK_KEY_WIDTH","white","getWhiteKeyStyle","getBlackKeyStyle","alignSelf","marginBottom","Keyboard","keyRefs","createRef","setUpMidi","NUM_KEYS","current","enableKey","disableKey","keys","numWhiteKeys","key","ref","getKeyArray","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f50615a.chunk.js","sourcesContent":["import { detect } from \"@tonaljs/chord-detect\";\n\nexport default class NoteManager {\n\n\tstatic NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\tstatic activeNotes = new Set();\n\tstatic lastChord = null;\n\tstatic currentChord = null;\n\n\tstatic onChordChangeCallbacks = [];\n\n\tstatic currentNoteDisabledTimeout = setTimeout(() => {}, 0);\n\tstatic noteDisabledBuffer = 200;\n\n\tstatic currentNoteEnabledTimeout = setTimeout(() => {}, 0);;\n\tstatic noteEnabledBufferNoChordLocked = 40;\n\tstatic noteEnabledBufferChordLocked = 400;\n\n\tstatic chordLocked = false;\n\tstatic chordOrigins = new Set();\n\n\tstatic listenForChordChange(callback) {\n\t\tNoteManager.onChordChangeCallbacks.push(callback);\n\t}\n\n\tstatic onMidiEvent(event) {\n\t\tlet [eventType, noteIndex] = event;\n\n\t\tif (eventType === 144) { // note on\n\t\t\tNoteManager.enableNote(noteIndex);\n\t\t} else if (eventType === 128) { // note off\n\t\t\tNoteManager.disableNote(noteIndex);\n\t\t}\n\t}\n\n\tstatic enableNote(noteIndex) {\n\t\tNoteManager.activeNotes.add(noteIndex);\n\t\tclearTimeout(this.currentNoteEnabledTimeout);\n\n\t\tNoteManager.currentNoteEnabledTimeout = setTimeout(\n\t\t\t() => NoteManager.calculateChord(), \n\t\t\tthis.chordLocked ? NoteManager.noteEnabledBufferChordLocked : NoteManager.noteEnabledBufferNoChordLocked\n\t\t);\n\t}\n\n\tstatic disableNote(noteIndex) {\n\t\tNoteManager.activeNotes.delete(noteIndex);\n\n\t\tclearTimeout(NoteManager.currentNoteDisabledTimeout);\n\n\t\tif (NoteManager.chordOrigins.has(noteIndex)) {\n\t\t\tNoteManager.chordOrigins.delete(noteIndex);\n\n\t\t\tif (NoteManager.chordOrigins.size < 2) {\n\t\t\t\tNoteManager.chordOrigins = new Set();\n\t\t\t\tNoteManager.chordLocked = false;\n\t\t\t\tconsole.log(\"Chord unlocked\");\n\t\t\t}\n\t\t}\n\t\tNoteManager.currentNoteDisabledTimeout = setTimeout(() => NoteManager.calculateChord(), NoteManager.noteDisabledBuffer);\n\t}\n\n\tstatic getNoteName(noteIndex) {\n\t\treturn NoteManager.NOTE_NAMES[noteIndex % 12];\n\t}\n\n\tstatic getNoteHue(noteName) {\n\t\tlet noteIndex = NoteManager.NOTE_NAMES.findIndex(noteName);\n\t\tlet hue = Math.floor(((noteIndex % 12) / 12) * 360)\n\n\t\treturn hue;\n\t}\n\n\tstatic calculateChord() {\n\t\tlet uniqueNotes = new Set(Array.from(NoteManager.activeNotes.values()).map((noteIndex) => NoteManager.getNoteName(noteIndex)));\n\n\t\t\n\t\tif (uniqueNotes.size < 3) {\n\t\t\tNoteManager.currentChord = null;\n\t\t\treturn;\n\t\t}\n\n\t\tlet sortedNotes = [...NoteManager.activeNotes].sort().map((noteIndex) => NoteManager.getNoteName(noteIndex));\n\n\t\tlet newChord = detect(sortedNotes)[0];\n\t\tif (newChord !== NoteManager.currentChord) {\n\t\t\tNoteManager.lastChord = NoteManager.currentChord;\n\t\t\tNoteManager.currentChord = newChord;\n\n\t\t\tif (newChord !== '') {\n\t\t\t\tNoteManager.chordLocked = true;\n\t\t\t\tNoteManager.chordOrigins = new Set(NoteManager.activeNotes)\n\t\t\t}\n\t\t\t\n\t\t\tNoteManager.onChordChangeCallbacks.forEach((callback) => callback(newChord))\n\t\t}\t\n\t}\n}","import { Chord } from \"@tonaljs/tonal\";\nimport NoteManager from './NoteManager';\nimport React from 'react';\n\nexport default class ChordViewer extends React.Component {\n\n\tstate = {\n\t\tcurrentChord: null,\n\t\tcurrentChordInfo: null,\n\t}\n\n\tcomponentDidMount() {\n\t\tNoteManager.listenForChordChange((newChord) => {this.setState({currentChord: newChord ,currentChordInfo: Chord.get(newChord)})})\n\t}\n\n\tgetCurrentChordColors() {\n\t\tif (!this.state.currentChord) {\n\t\t\treturn [\"hsl(0, 0%, 40%\", \"hsl(0, 0%, 60%\"]\n\t\t}\n\n\t\tlet tonic = this.state.currentChordInfo.tonic;\n\t\tlet hue = Math.floor(((NoteManager.NOTE_NAMES.indexOf(tonic)) / 12) * 360)\n\t\treturn [`hsl(${hue}, 60%, 40%)`, `hsl(${hue}, 40%, 60%)`];\n\t}\n\n\trender() {\n\t\tlet chordColors = this.getCurrentChordColors();\n\t\tlet symbol = this.state.currentChordInfo ? this.state.currentChordInfo.symbol : '';\n\t\tlet type = this.state.currentChordInfo ? this.state.currentChordInfo.type : '';\n\n\t\tif (symbol === '') {\n\t\t\tsymbol = '?';\n\t\t}\n\t\treturn (\n\t\t\t<div style={{height: 400, width: 800, display: \"flex\", justifyContent: \"center\", alignItems: \"stretch\"}}>\n\t\t\t\t<div style={{backgroundColor: chordColors[0], borderRadius: 20, flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"stretch\"}}>\n\t\t\t\t\t<div style={{height: 270, margin: 10, backgroundColor: chordColors[1], borderRadius: 10, display: \"flex\", justifyContent: 'center', alignItems: 'center', color: 'white', fontSize: 200}}>\n\t\t\t\t\t\t{symbol}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={{height: 120, margin: 10, backgroundColor: chordColors[1], borderRadius: 10, display: \"flex\", justifyContent: 'center', alignItems: 'center', color: 'white', fontSize: 70}}>\n\t\t\t\t\t\t{type}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import { Chord } from \"@tonaljs/tonal\";\nimport { ChordBox } from 'vexchords';\nimport NoteManager from './NoteManager';\nimport React from 'react';\nimport chordData from './chord_data.json';\n\nexport default class GuitarChordViewer extends React.Component {\n\n\n\tcomponentDidMount() {\n\t\tthis.setUpChordBox();\n\n\t\tNoteManager.listenForChordChange((newChord) => { this.renderChord(newChord) });\n\t}\n\n\tsetUpChordBox() {\n\t\tthis.chordbox = new ChordBox('#chordbox', {\n\n\t\t\twidth: 140, // canvas width\n\t\t\theight: 220, // canvas height\n\t\t\tcircleRadius: 5, // circle radius (width / 20 by default)\n\n\t\t\tnumStrings: 6, // number of strings (e.g., 4 for bass)\n\t\t\tnumFrets: 5, // number of frets (e.g., 7 for stretch chords)\n\t\t\tshowTuning: true, // show tuning keys\n\n\t\t\tdefaultColor: '#666', // default color\n\t\t\tbgColor: '#FFF', // background color\n\t\t\tstrokeColor: '#666', // stroke color (overrides defaultColor)\n\t\t\ttextColor: '#666', // text color (overrides defaultColor)\n\t\t\tstringColor: '#666', // string color (overrides defaultColor)\n\t\t\tfretColor: '#666', // fret color (overrides defaultColor)\n\t\t\tlabelColor: '#666', // label color (overrides defaultColor)\n\n\t\t\tfretWidth: 1, // fret width\n\t\t\tstringWidth: 1, // string width\n\n\t\t});\n\t\tthis.renderBlankChord();\n\t}\n\n\trenderBlankChord() {\n\t\tthis.chordbox.draw({\n\t\t\tchord: [],\n\t\t\ttuning: ['E', 'A', 'D', 'G', 'B', 'E'],\n\t\t})\n\t}\n\n\tcalculateBarres(fingers, frets) {\n\n\t\tlet barres = [];\n\t\tlet consideredFingers = new Set();\n\n\t\tfor (let i = 0; i<6; i++) {\n\t\t\tlet finger = fingers[i];\n\t\t\tif (consideredFingers.has(finger) || frets[i] === '0' || frets[i] === 'x') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet fromString = 6-i;\n\t\t\tlet toString = fromString;\n\n\t\t\tfor (let j = i+1; j<6; j++) {\n\t\t\t\tif (fingers[j] === finger) {\n\t\t\t\t\ttoString = 6 - j;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (toString !== fromString) {\n\t\t\t\tbarres.push({\n\t\t\t\t\tfromString: fromString,\n\t\t\t\t\ttoString: toString,\n\t\t\t\t\tfret: parseInt(frets[i]),\n\t\t\t\t});\n\n\t\t\t\tconsideredFingers.add(finger);\n\t\t\t}\n\t\t}\n\n\t\treturn barres;\n\t}\n\n\trenderChord(chord_) {\n\t\tlet existingChord = document.querySelector('#chordbox');\n\t\texistingChord.innerHTML = '';\n\t\tthis.setUpChordBox();\n\n\n\t\tlet chordInfo = Chord.get(chord_);\n\n\t\tif (!chordInfo) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet symbol = chordInfo.symbol;\n\n\n\t\tlet fingeringInfo = chordData[symbol];\n\n\t\tif (!fingeringInfo || fingeringInfo.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet frets = Array.from(fingeringInfo[0].frets);\n\t\tlet lowestFret = -1;\n\t\tfor (let i = 0; i<6; i++) {\n\t\t\tif (frets[i] === 'x' || frets[i] === '0') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet fretNum = parseInt(frets[i]);\n\t\t\tif (fretNum < lowestFret) {\n\t\t\t\tlowestFret = fretNum;\n\t\t\t}\n\t\t}\n\n\t\tlet positionOffset = 0;\n\t\tif (lowestFret >= 3) {\n\t\t\tpositionOffset = lowestFret - 1;\n\t\t}\n\n \n\t\tlet chord = fingeringInfo[0].frets.map((fret, i) => {\n\t\t\treturn [6-i, fret, parseInt(fingeringInfo[0].fingers[i])];\n\t\t});\n\n\t\t\n\t\tthis.chordbox.draw({\n\t\t\t// array of [string, fret, label (optional)]\n\t\t\tchord: chord,\n\t\t  \n\t\t\t// optional: tuning keys\n\t\t\ttuning: ['E', 'A', 'D', 'G', 'B', 'E'],\n\n\t\t\tbarres: this.calculateBarres(fingeringInfo[0].fingers, fingeringInfo[0].frets),\n\n\t\t\tposition: positionOffset,\n\t\t  });\n\t}\n\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div style={{height: 250, width: 1200, display: \"flex\", justifyContent: \"center\", alignItems: \"stretch\"}}>\n\t\t\t\t<div style={{backgroundColor: \"darkslategray\", borderRadius: 20, flexGrow: 1, display: \"flex\", alignItems: \"center\", justifyContent: 'center'}}>\n\t\t\t\t\t<div id=\"chordbox\" style={{backgroundColor: 'whitesmoke', borderRadius: 20}}>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import NoteManager from \"./NoteManager\";\n\nexport default class MidiManager {\n\n\tstatic listeners = [];\n\n\tstatic setUpMidi() {\n\t\tconsole.log(navigator)\n\t\tnavigator.requestMIDIAccess().then(MidiManager.onMidiSucess, MidiManager.onMidiFail);\n\n\t\tMidiManager.listenForMidiEvents((event) => NoteManager.onMidiEvent(event));\n\t}\n\n\tstatic onMidiSucess(midiAcess) {\n\n\t\tlet inputs = midiAcess.inputs;\n\n\t\tif (inputs) {\n\t\t\tfor (let input of inputs.values()) {\n\t\t\t\tinput.onmidimessage = MidiManager.midiEventOccurred;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic onMidiFail() {\n\t\tconsole.log(\"Failed to connect MIDI\");\n\t}\n\n\tstatic listenForMidiEvents(callback) {\n\t\tMidiManager.listeners.push(callback);\n\t}\n\n\tstatic midiEventOccurred(event) {\n\t\tMidiManager.listeners.forEach(callback => callback(event.data));\n\t}\n\t\n\tstatic checkMidiAccess() {\n\t\tconsole.log('Checking MIDI Access');\n\t\tconsole.log(navigator);\n\t\tif (navigator.requestMIDIAccess) {\n\t\t\tconsole.log('This browser supports WebMIDI!');\n\t\t\treturn true;\n\t\t} else {\n\t\t\tconsole.log('WebMIDI is not supported in this browser.');\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n","import MidiManager from './MidiManager';\nimport NoteManager from './NoteManager';\nimport React from 'react';\n\nconst NUM_KEYS = 84;\n\nconst WHITE_KEY_WIDTH = 28;\nconst WHITE_KEY_HEIGHT = 115;\n\nconst BLACK_KEY_WIDTH = 18;\nconst BLACK_KEY_HEIGHT = 78;\n\nconst WHITE_KEY_PATTERN = [true, false, true, false, true, true, false, true, false, true, false, true];\n\nconst KEY_SATURATION_RANGE = [20, 80];\nconst KEY_LIGHTNESS_RANGE = [0, 80]\n\nclass KeyboardKey extends React.Component {\n\n\tstate = {\n\t\tkeyActive: false,\n\t\tvelocity: 0,\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.keyColor = this.getKeyColor();\n\t}\n\n\tenableKey(velocity) {\n\t\tthis.setState({keyActive: true, velocity: velocity});\n\t}\n\n\tdisableKey() {\n\t\tthis.setState({keyActive: false});\n\t}\n\n\tgetKeyColor(velocity) {\n\t\tlet hue = Math.floor(((this.props.index % 12) / 12) * 360)\n\n\t\tlet velocityMultiplier = velocity / 127;\n\t\tlet lightness = Math.floor(KEY_LIGHTNESS_RANGE[1] - (velocityMultiplier * (KEY_LIGHTNESS_RANGE[1] - KEY_LIGHTNESS_RANGE[0])));\n\t\tlet saturation = Math.floor(KEY_SATURATION_RANGE[0] + (velocityMultiplier * (KEY_SATURATION_RANGE[1] - KEY_SATURATION_RANGE[0])));\n\n\t\treturn `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n\t}\n\n\tgetWhiteKeyStyle() {\n\t\treturn {\n\t\t\theight: WHITE_KEY_HEIGHT,\n\t\t\twidth: WHITE_KEY_WIDTH,\n\t\t\toutline: '1px solid black',\n\t\t\tborderRadius: '2px',\n\n\t\t\tbackgroundColor: this.state.keyActive ? this.getKeyColor(this.state.velocity) : 'whitesmoke',\n\n\t\t\tdisplay: 'flex',\n\t\t\tjustifyContent: 'center',\n\t\t};\n\t}\n\n\tgetBlackKeyStyle(numKeysOffset) {\n\n\t\tlet pxOffset = (numKeysOffset * WHITE_KEY_WIDTH) - (BLACK_KEY_WIDTH / 2);\n\n\t\treturn {\n\t\t\theight: BLACK_KEY_HEIGHT, \n\t\t\twidth: BLACK_KEY_WIDTH, \n\n\t\t\tposition: 'absolute',\n\t\t\tleft: pxOffset,\n\n\t\t\tborderRadius: '2px', \n\n\t\t\toutline: '1px solid black',\n\t\t\tbackgroundColor: this.state.keyActive ? this.getKeyColor(this.state.velocity) : 'black',\n\n\t\t\tdisplay: 'flex',\n\t\t\tjustifyContent: 'center',\n\t\t}\n\t}\n\n\trender() {\n\t\treturn <div style={this.props.white ? this.getWhiteKeyStyle() : this.getBlackKeyStyle(this.props.numKeysOffset)}>\n\t\t\t\n\t\t\t<div \n\t\t\t\tstyle={{\n\t\t\t\t\talignSelf: 'flex-end', \n\t\t\t\t\tmarginBottom: '8px', \n\t\t\t\t\twidth: '15px', \n\t\t\t\t\theight: '15px', \n\t\t\t\t\tborderRadius: '15px', \n\t\t\t\t\tbackgroundColor: 'white', \n\t\t\t\t\tfontSize: 10, \n\t\t\t\t\tdisplay: this.state.keyActive ? 'flex' : 'none',\n\t\t\t\t\tjustifyContent: 'center', \n\t\t\t\t\talignItems: 'center',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{NoteManager.getNoteName(this.props.index)}\n\t\t\t</div>\n\t\t</div>\n\t}\n}\n\nexport default class Keyboard extends React.Component {\n\n\t\n\tkeyRefs = [];\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tfor (let i=0; i<NUM_KEYS; i++) {\n\t\t\tthis.keyRefs.push(React.createRef());\n\t\t}\n\n\t}\n\n\tcomponentDidMount() {\n\t\tMidiManager.setUpMidi();\n\t\tMidiManager.listenForMidiEvents((event) => this.onMidiEvent(event));\n\n\t}\n\n\tonMidiEvent(event) {\n\t\tlet [eventType, noteIndex, velocity] = event;\n\n\t\tif (eventType === 144) { // note on\n\n\t\t\tif (noteIndex >= 24 && noteIndex < NUM_KEYS + 24) {\n\t\t\t\tthis.keyRefs[noteIndex - 24].current.enableKey(velocity);\n\t\t\t} else {\n\t\t\t\tconsole.log(`Note out of range: ${noteIndex}`);\n\t\t\t}\n\t\t} else if (eventType === 128) { // note off\n\t\t\tif (noteIndex >= 24 && noteIndex < NUM_KEYS + 24) {\n\t\t\t\tthis.keyRefs[noteIndex - 24].current.disableKey();\n\t\t\t} else {\n\t\t\t\tconsole.log(`Note out of range: ${noteIndex}`);\n\t\t\t}\n\t\t} \n\t}\n\n\t\n\n\tgetKeyArray() {\n\t\tlet keys = [];\n\t\tlet numWhiteKeys = 0;\n\t\t\n\t\tfor (let i=0; i<NUM_KEYS; i++) {\n\t\t\tlet key;\n\t\t\tif (WHITE_KEY_PATTERN[i % 12]) {\n\t\t\t\tkey = <KeyboardKey \n\t\t\t\t\tindex={i+24} \n\t\t\t\t\twhite \n\t\t\t\t\tkey={i}\n\t\t\t\t\tref={this.keyRefs[i]}\n\t\t\t\t/>\n\t\t\t\tnumWhiteKeys++;\n\t\t\t} else {\n\t\t\t\tkey = <KeyboardKey \n\t\t\t\t\tindex={i+24} \n\t\t\t\t\twhite={false} \n\t\t\t\t\tnumKeysOffset={numWhiteKeys}\n\n\t\t\t\t\tkey={i}\n\t\t\t\t\tref={this.keyRefs[i]}\n\t\t\t\t/>\n\t\t\t}\n\t\t\t\n\t\t\tkeys.push(key);\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{display: 'flex', position: 'relative'}}>\n\t\t\t\t{this.getKeyArray()}\n\t\t\t</div>\n\t\t);\n\t}\n}","import './App.css';\n\nimport ChordViewer from './ChordViewer';\nimport GuitarChordViewer from './GuitarChordViewer';\nimport Keyboard from './Keyboard';\nimport React from 'react';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"main\">\n\t\t\t\t<div className=\"keyboardContainer\">\n\t\t\t\t\t<Keyboard />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"chordViewerContainer\">\n\t\t\t\t\t<ChordViewer />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"guitarChordViewerContainer\">\n\t\t\t\t\t<GuitarChordViewer />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}